* About
This is meant to demonstrate the implementation of a simple derived type which
is ~bind(c)~ compatible in the form of a new type. This implementation is in
theory not strongly linked to the implementation within Fortran, and might
eventually be used for regular Fortran types.

However, this is complicated enough to work in two stages. First there is a
basic implementation in C-Python in the ~cpython~ folder. Followed by a fortran
implementation, which will then be mapped into a Python implementaiton.

** Usage
#+begin_src bash
meson setup bbdir
meson compile -C bbdir
export PYTHONPATH=$PYTHONPATH:$(pwd)/bbdir
pytest
./bbdir/ctestf
./bbdir/ftest
./bbdir/ftest_cwrap
#+end_src

Look into generating a wrapper in Fortran which would then be manipulated via pointers on the C side.

*** Tasks
- What about other compilers?
- Look at approaches for non-bind(c) variants
- Extend the Python members with a pointer to the object
  - Without ~bind(c)~
- Allocate memory and use pointers with ~bind(c)~ as well
